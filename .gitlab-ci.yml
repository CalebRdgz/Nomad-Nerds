stages:
  - test # Run tests first
  - build # Run build after tests

services:
  - postgres:14.2-bullseye

variables:
  DATABASE_URL: postgresql://users:password@postgres:5432/users
  POSTGRES_PASSWORD: test_databases
  API_YELP_KEY: ${API_YELP_KEY}

lint-test-job:
  image: python:3-bullseye
  stage: test
  script:
    - pip install flake8
    - flake8 user api-yelp

django-app-unit-test-job:
  image: python:3-bullseye
  stage: test
  script:
    - cd user
    - pip install -r requirements.txt
    - python manage.py test

yelp-api-unit-test-job:
  image: python:3-bullseye
  stage: test
  script:
    - cd api-yelp
    - pip install -r requirements.txt
    - python -m pytest

build-front-end-job:
  rules:
    - if: ($CI_COMMIT_BRANCH == "deploy" || $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH)
  stage: build
  image: node:lts-bullseye
  needs:
    - django-app-unit-test-job
    - yelp-api-unit-test-job
    - lint-test-job
  script:
    - cd ghi
    - npm install
    - npm run build
  artifacts:
    paths:
      - ghi/build/

build-back-end-job:
  rules:
    - if: ($CI_COMMIT_BRANCH == "deploy" || $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH)
  stage: build
  image: docker:latest
  services:
    - docker:dind
  script:
    - cd user
    - docker build -t ${CI_REGISTRY_IMAGE}/user:latest .
    - docker tag ${CI_REGISTRY_IMAGE}/user:latest ${CI_REGISTRY_IMAGE}/user:$CI_JOB_ID
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
    - docker push ${CI_REGISTRY_IMAGE}/user:$CI_JOB_ID
    - docker push ${CI_REGISTRY_IMAGE}/user:latest
    